import { inferRouterOutputs } from "@trpc/server";
import { type NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import Pagination from "../components/Paginations";

import type { AppRouter } from '../server/api/root';

import { api } from "../utils/api";

type RouterOutput = inferRouterOutputs<AppRouter>;

type JourneyGetOutput = RouterOutput['journeys']['getJourneys']

const Journeys: NextPage = () => {
  const [journeys, setJourneys] = useState<JourneyGetOutput>();
  const [pagination, setPagination] = useState<number>(0);
  
  const { data } = api.journeys.getJourneys.useQuery({ skip: pagination});

  useEffect(() => {
    if (data) setJourneys(data);
  }, [data]);
  
  if (!journeys) {
    return (
      <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen items-center justify-center bg-slate-800">
        <h1 className="text-white text-4xl pt-4 mb-4 font-extrabold leading-none text-center">Journeys</h1>
        <h2>loading</h2>
      </main>
    </>
    )
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen items-center justify-center bg-slate-800">
        <h1 className="text-white text-4xl pt-4 mb-4 font-extrabold leading-none text-center">Journeys</h1>
        <div className="relative overflow-x-auto shadow-md max-w-2xl mx-auto my-4 rounded">
          <table className="w-full text-sm text-left text-gray-300">
            <thead className="uppercase bg-gray-400 text-gray-900">
              <tr>
                <th scope="col" className="p-4">Departure station</th>
                <th scope="col" className="p-4">Return station</th>
                <th scope="col" className="p-4">Distance</th>
                <th scope="col" className="p-4">Duration</th>
              </tr>
            </thead>
            <tbody>
              {journeys[1].map(j => (
              <tr className="bg-gray-300 border-b hover:bg-gray-600 text-gray-900" key={j.id}>
                <td className="p-4">{j.departure_station.name}</td>
                <td className="p-4">{j.return_station.name}</td>
                <td className="p-4">{(j.distance / 1000).toPrecision(3)} km</td>
                <td className="p-4">{(j.duration / 60).toPrecision(2)} minutes</td>
              </tr>
              ))}
            </tbody>
          </table>
        </div>
        <Pagination maxItems={journeys[0]} pagination={pagination} setPagination={setPagination} />
      </main>
    </>
  );
};

export default Journeys;
